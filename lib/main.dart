// lib/main.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart' as fb;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_crashlytics/firebase_crashlytics.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'firebase_options.dart'; // Generated by flutterfire configure
import 'core/services/offline_service.dart';
import 'app.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Hive for local storage
  await Hive.initFlutter();

  try {
    // Initialize Firebase
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );

    // Debug authentication state changes
    fb.FirebaseAuth.instance.authStateChanges().listen((fb.User? user) {
      if (user == null) {
        debugPrint('üî¥ User is currently signed out!');
      } else {
        debugPrint('üü¢ User is signed in: ${user.email}');
      }
    });

    // Enable Firestore offline persistence
    FirebaseFirestore.instance.settings = const Settings(
      persistenceEnabled: true,
      cacheSizeBytes: Settings.CACHE_SIZE_UNLIMITED,
    );

    // Set up Firebase Crashlytics for error reporting
    FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterFatalError;

    // Register Hive adapters for offline storage
    await OfflineService.registerAdapters();

    // Initialize offline storage
    await OfflineService.initialize();

    // Check if user is already logged in
    final fb.User? firebaseUser = fb.FirebaseAuth.instance.currentUser;
    if (firebaseUser != null) {
      debugPrint('Firebase user already logged in: ${firebaseUser.email}');
    }

    runApp(
      const ProviderScope(
        child: TurboAirApp(),
      ),
    );
  } catch (e) {
    debugPrint('‚ùå Initialization error: $e');

    // Show error UI if initialization fails
    runApp(ConfigErrorApp(error: e.toString()));
  }
}

// Error app to show when configuration is missing or initialization fails
class ConfigErrorApp extends StatelessWidget {
  final String? error;

  const ConfigErrorApp({super.key, this.error});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        backgroundColor: const Color(0xFF20429C),
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Icon(
                  Icons.warning_amber_rounded,
                  size: 80,
                  color: Colors.white,
                ),
                const SizedBox(height: 24),
                const Text(
                  'Configuration Error',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),
                Text(
                  error != null
                      ? 'Initialization failed:\n$error'
                      : 'Firebase configuration not found.\nPlease check your setup.',
                  style: const TextStyle(color: Colors.white70, fontSize: 16),
                  textAlign: TextAlign.center,
                ),
                const SizedBox(height: 24),
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.black26,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: const Text(
                    'Steps to fix:\n'
                    '1. Run: flutterfire configure\n'
                    '2. Select your Firebase project\n'
                    '3. Choose platforms to support\n'
                    '4. Run: flutter pub get\n'
                    '5. Restart the app',
                    style: TextStyle(
                      color: Colors.white,
                      fontFamily: 'monospace',
                      fontSize: 12,
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    // Attempt to restart (won't actually work, just for UX)
                    debugPrint('User requested restart');
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.white,
                    foregroundColor: const Color(0xFF20429C),
                  ),
                  child: const Text('Retry'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
